//@version=5
strategy("2 Standard Deviation Buy Strategy (TP/SL)", 
         overlay=true, 
         initial_capital=100000, 
         pyramiding=50, 
         default_qty_value=2, 
         default_qty_type=strategy.percent_of_equity)
  
// --- INPUTS ---

// New Input Toggle for Buy Condition
buy_condition_option = input.string("Lower Band - Cross Above", title="Buy Condition",
                                     options=["Lower Band - Cross Above", "Upper Band - Cross Above", "SMA - Cross Above"], 
                                     group="Strategy Logic")

// NEW: Input to toggle the profitability check for pyramiding
pyramid_when_profitable = input.bool(true, title="Pyramid Only When Profitable?", group="Strategy Logic")

// Date Range Inputs
start_date = input.time(title="Start Date", defval=timestamp("2008-3-1"), group="Date Range")
close_date = input.time(title="Close Date", defval=timestamp("2024-10-1"), group="Date Range")

// Bollinger Bands Inputs
length = input.int(20, title="BB Length", minval=1, group="Bollinger Bands")
stdev_factor = input.float(2.0, title="StdDev Factor", minval=0.1, group="Bollinger Bands")

// Take Profit and Stop Loss Inputs (as positive percentages)
tpPercent = input.float(2, minval=0.01, step=0.01, title="Take Profit (%)", group="Risk Management")
slPercent = input.float(1, minval=0.01, step=0.01, title="Stop Loss (%)", group="Risk Management")

// --- CALCULATIONS ---

// Calculate moving average and standard deviation for Bollinger Bands
sma = ta.sma(close, length)
stdev = ta.stdev(close, length)

// Calculate upper and lower bands
upper_band = sma + stdev_factor * stdev
lower_band = sma - stdev_factor * stdev

// --- STRATEGY LOGIC ---

// Check if the current bar is within the specified date range
bool isWithinDateRange = time >= start_date and time < close_date

// Define the three possible buy conditions
bool buyBelowSignal = ta.crossover(close, lower_band)
bool buyAboveSignal = ta.crossover(close, upper_band)
bool buyAtSMASignal = ta.crossover(close, sma) 

// UPDATED: Condition to only add to a position if it's profitable
// This check is now conditional based on the new input toggle
bool canPyramid = not pyramid_when_profitable or (strategy.position_size == 0 or close > strategy.position_avg_price)

// Entry Logic: Enter a long position based on the selected input toggle
if (isWithinDateRange and canPyramid) // Using the new 'canPyramid' condition
    if (buy_condition_option == "Lower Band - Cross Above" and buyBelowSignal)
        strategy.entry("Buy", strategy.long)
    
    if (buy_condition_option == "Upper Band - Cross Above" and buyAboveSignal)
        strategy.entry("Buy", strategy.long)

    if (buy_condition_option == "SMA - Cross Above" and buyAtSMASignal)
        strategy.entry("Buy", strategy.long)

// Exit Logic: Set TP/SL for open positions
if (strategy.position_size > 0)
    // Calculate TP and SL price levels based on the average entry price
    float stopLossPrice = strategy.position_avg_price * (1 - slPercent / 100)
    float takeProfitPrice = strategy.position_avg_price * (1 + tpPercent / 100)
    
    // Submit an exit order with the calculated SL and TP
    strategy.exit("TP/SL Exit", from_entry="Buy", stop=stopLossPrice, limit=takeProfitPrice)

// Close all positions if the backtest end date is reached
if (time >= close_date)
    strategy.close_all(comment="End of Backtest Period")
    
// --- PLOTTING ---

// Plot the Bollinger Bands on the chart
plot(sma, "SMA", color=color.orange)
plot(upper_band, "Upper Band", color=color.blue)
plot(lower_band, "Lower Band", color=color.blue)